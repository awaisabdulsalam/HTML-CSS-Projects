const express = require("express");
const jwt = require("jsonwebtoken");
const app = express();

// const secretKey = "secretkey";

// app.get("/random/:min/:max", (req, res) => {
//     let min = parseInt(req.params.min);
//     let max = parseInt(req.params.max);
//     if (isNaN(min) || isNaN(max)) {
//         res.status(400);
//         res.json({ error: "Bad request" });
//         return;
//     }

//     let result = Math.round((Math.random() * (max - min)) + min);
//     res.json({ result: result });
// });

// app.post("/login", (req, res) => {
//     //*  user object will be stored in authData below
//     const user = {
//         id: 1,
//         name: "Awais",
//         email: "test@mail.com"
//     }
//     jwt.sign({ user }, secretKey, { expiresIn: '1hr' }, (err, token)=> {
//         res.json({
//             token
//         })
//     })
// });

// app.post("/profile", verifyToken, (req, res) => {
//     jwt.verify(req.token, secretKey, (err, authData) => {
//             //?   agr token or key match ho gyi tuo data otherwise err
//         if (err) {
//             res.send({ result: "Invalid token"});
//         } else {
//             res.json({
//                 message: "Profile accessed",
//                 authData: authData //? authData will equal to user from login ^^^^ above
//             })
//         }
//     })
// });

// //?  Because it will work as middleware
// function verifyToken(req, res, next) {
//     const bearerHeader = req.headers["authorization"];
//     if (typeof bearerHeader !== "undefined") {
//         const bearer = bearerHeader.split(" ");
//         console.log(bearer);
//         const token = bearer[1];
//         req.token = token;
//         next();
//     } else {
//       res.send({
//         result: "Token is not valid",
//       });
//     }
// }

const mongoose = require("mongoose");
mongoose.connect("mongodb://127.0.0.1:27017/newnode");

const userSchema = new mongoose.Schema({
  username: String,
  email: String,
});

const postSchema = new mongoose.Schema({
  title: String,
  postedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
});

// Creating models from userSchema and postSchema
const User = mongoose.model("User", userSchema);
const Post = mongoose.model("Post", postSchema);

app.post("/user", (req, res) => {
  const userData = new User({
    username: req.body.username,
    email: req.body.email,
  });
  const respo = userData.save();
  console.log(respo);
});

// Query to find and show all the posts
Post.find()
  .then((p) => console.log("Not found this ", p))
  .catch((error) => console.log(error));

app.listen(3000, () => {
  console.log("App is running");
});
